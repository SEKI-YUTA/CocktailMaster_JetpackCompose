plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.devtool.ksp)
    alias(libs.plugins.roborazzi)
    alias(libs.plugins.apollo3)
    alias(libs.plugins.ktlint)
}


ktlint {
    version = "0.48.1"
    debug = true
    verbose = true
    android = true
    outputColorName = "RED"
    ignoreFailures = true
    enableExperimentalRules = true
    disabledRules = [
            "trailing-comma-on-call-site",
            "max-line-length",
            "standard:wrapping"
    ]
    reporters {
        reporter "checkstyle"
        reporter "html"
    }
}

apollo {
    service("service") {
        packageName.set("com.yuta.cocktailmaster")
    }
}

android {

    namespace 'com.yuta.cocktailmaster'
    compileSdk 34

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    defaultConfig {
        applicationId "com.yuta.cocktailmaster"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "versions"
    productFlavors {
        physical {
            dimension "versions"
            applicationIdSuffix ".physical"
            buildConfigField("String", "BASE_URL", "\"https://cocktail-api.fly.dev/\"")
        }
        emulator {
            dimension "versions"
            applicationIdSuffix ".emulator"
            buildConfigField("String", "BASE_URL", "\"http://10.0.2.2:9090/\"")
        }
        gql {
            dimension "versions"
            applicationIdSuffix ".gql"
            // このフレーバーではBASE_URLは使わないが、定義しないとエラーになるのでダミーの値を入れる
            buildConfigField("String", "BASE_URL", "\"http://10.0.2.2:9090/\"")
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        def buildType = variant.buildType.name
        if(names.contains("emulator") && buildType.contains("release")) {
            setIgnore(true)
        }
    }

    compileOptions {
        sourceCompatibility 17
        targetCompatibility 17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    def nav_version = "2.7.5"
    def room_version = "2.5.0"
    def lifecycle_version = "2.6.2"
    def mockkVersion = "1.13.8"

    implementation libs.androidx.core.ktx
    implementation platform(libs.kotlin.bom)
    implementation libs.lifecycle.runtime.ktx
    implementation libs.activity.compose
    implementation platform(libs.compose.bom)
    implementation libs.compose.ui
    implementation libs.compose.ui.graphics
    implementation libs.compose.ui.tooling.preview
    implementation libs.material3

    implementation libs.navigation.compose
    implementation libs.room.runtime
    implementation libs.room.ktx
    // To use Kotlin Symbol Processing (KSP)
    ksp libs.room.compiler
    // ViewModel utilities for Compose
    implementation libs.lifecycle.viewmodel.compose
    implementation libs.kotlinx.serialization.json
    implementation libs.retrofit
    implementation libs.retrofit2.kotlin.serialization.converter
    implementation libs.datastore.preference
    implementation libs.constraint.layout
    implementation libs.apollo.runtime
    implementation libs.material3.window.size

    testImplementation libs.junit
    testImplementation libs.robolectric
    testImplementation libs.roborazzi
    testImplementation libs.roborazzi.compose
    testImplementation libs.roborazzi.junit.rule
    testImplementation libs.mockk.android
    testImplementation libs.mockk.agent
    testImplementation libs.ui.test.junit4
    testImplementation libs.kotest.assertions.core
    testImplementation libs.kotlinx.coroutines.test

    androidTestImplementation libs.androidx.test.ext
    androidTestImplementation libs.androidx.test.espresso
    androidTestImplementation platform(libs.compose.bom)
    androidTestImplementation libs.ui.test.junit4
    debugImplementation libs.androidx.compose.ui.tooling
    debugImplementation libs.androidx.compose.ui.test.manifest
}